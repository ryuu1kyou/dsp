% node = {'BCB24',-5,2,4,0,3,4,0,3;
%  'BCB23',-4,2,3,4,2,3,4,2;
%  'BCB22',-3,2,2,3,1,2,3,1;
%  'BCB21',-2,2,1,2,6,1,2,7;
%  'VUB12',-1,1,7,0,0,0,0,0;
%  'VUB22',-1,2,6,1,10,7,1,9;
%  'VUB32',-1,3,5,0,9,6,0,8;
%  'VUB42',-1,4,0,0,0,5,0,0;
%  % 'VUB52'	-1	5
% 'VUB11',0,1,0,0,0,10,0,14;
%  'VUB21',0,2,10,6,13,9,7,13;
%  'VUB31',0,3,9,5,12,8,6,12;
%  'VUB41',0,4,8,0,11,0,0,0;
%  'BUB12',1,1,14,0,0,14,10,0;
% % 'VUB51'	0	5
%  'BUB22',1,2,13,10,0,13,9,0;
%  'BUB32',1,3,12,9,0,12,8,0;
%  'BUB42',1,4,11,8,0,11,0,0;
%  'BUB11',2,1,0,0,0,0,0,0;
%  'BUB21',2,2,0,0,0,0,0,0;
%  'BUB31',2,3,0,0,0,0,0,0;
%  'BUB41',2,4,0,0,0,0,0,0
%  };

node = {'BCB24',-5,2,4,0,3,4,0,3;
    'BCB23',-4,2,3,4,2,3,4,2;
    'BCB22',-3,2,2,3,1,2,3,1;
    'BCB21',-2,2,1,2,7,1,2,8;
    'VUB12',-1,1,8,0,0,0,0,0;
    'VUB22',-1,2,7,1,12,8,1,11;
    'VUB32',-1,3,6,0,11,7,0,10;
    'VUB42',-1,4,5,0,10,6,0,9;
    'VUB52',-1,5,0,0,0,5,0,0;
    'VUB11',0,1,0,0,0,12,0,16;
    'VUB21',0,2,12,7,15,11,8,15;
    'VUB31',0,3,11,6,14,10,7,14;
    'VUB41',0,4,10,5,13,9,6,13;
    'VUB51',0,5,9,0,0,0,0,0;
    'BUB12',1,1,16,0,0,16,12,0;
    'BUB22',1,2,15,12,0,15,11,0;
    'BUB32',1,3,14,11,0,14,10,0;
    'BUB42',1,4,13,10,0,13,9,0;
    'BUB11',2,1,0,0,0,0,0,0;
    'BUB21',2,2,0,0,0,0,0,0;
    'BUB31',2,3,0,0,0,0,0,0;
    'BUB41',2,4,0,0,0,0,0,0
    };

PRE_MAX = 0;
for i = 1:size(State.baseNode,1)
    if strfind(State.baseNode{i,1},'BCB')
        PRE_MAX = PRE_MAX + 1;
    end
end

VSS_MAX = 0;
for i = 1:size(State.baseNode,1)
    if strfind(State.baseNode{i,1},'VUB')
        VSS_MAX = VSS_MAX + 1;
    end
end
VSS_MAX = VSS_MAX / 2 - 1;

[~,t] = find(cell2mat(State.baseNode(:,2)) == 1);
EXTRA_ROW_MAX=sum(t);
EXTRA_MAX = State.baseNode{end,2} -1;

tmpBaseNode = sortrows(State.baseNode,4);
State.baseNodeName = [];
State.dp = [];
State.dn = [];
for i = 1:size(tmpBaseNode,1)
    if tmpBaseNode{i, 4} > 0
        State.baseNodeName = [State.baseNodeName ; append(extractBefore(tmpBaseNode{i,1},3),'D',extractAfter(tmpBaseNode{i,1},3))];
        State.dp = [State.dp tmpBaseNode{i,5}];
        State.dn = [State.dn tmpBaseNode{i,6}];
    end
end
tmpBaseNode = sortrows(State.baseNode,7);
State.up = [];
State.un = [];
for i = 1:size(tmpBaseNode,1)
    if tmpBaseNode{i, 7} > 0
        State.baseNodeName = [State.baseNodeName ; append(extractBefore(tmpBaseNode{i,1},3),'U',extractAfter(tmpBaseNode{i,1},3))];
        State.up = [State.up tmpBaseNode{i,8}];
        State.un = [State.un tmpBaseNode{i,9}];
    end
end

State.baseNodeIdx = [];
for i = 1:size(State.baseNodeName,1)
    for j = 1:size(State.G.Nodes,1)
        if strcmp(State.baseNodeName(i,:), State.G.Nodes(j,:).Name)
            State.baseNodeIdx = [State.baseNodeIdx ; j];
        end
    end
end


        ind = find(nodeNumberVector(1, 1:State.vssInpUpInd-1) == targetNumber);
        if ~isempty(ind)
            if nodeVector(1, State.vssInpUpInd) == 0
                if motion(targetNumber) == 1
                    if ind >= State.extraInd && ind <= State.vssInpUpInd-1
                        leave2 = [leave2 nodeVector(1, ind)];
                        leaveNumber2 = [leaveNumber2 nodeNumberVector(1, ind)];
                    else
                        nextNodeVector2(1, State.dn(ind)) = nodeVector(1, ind);
                        nextNodeNumberVector2(1, State.dn(ind)) = nodeNumberVector(1, ind);
                    end
                elseif motion(targetNumber) == -1
                    nextNodeVector2(1, State.dp(ind)) = nodeVector(1, ind);
                    nextNodeNumberVector2(1, State.dp(ind)) = nodeNumberVector(1, ind);
                else
                    nextNodeVector2(1, ind) = nodeVector(1, ind);
                    nextNodeNumberVector2(1, ind) = nodeNumberVector(1, ind);
                end
            else
                if motion(targetNumber) == 1
                    if ind >= State.extraInd && ind <= State.vssInpUpInd-1
                        leave2 = [leave2 nodeVector(1, ind)];
                        leaveNumber2 = [leaveNumber2 nodeNumberVector(1, ind)];
                    else
                        nextNodeVector2(1, State.un(ind)) = nodeVector(1, ind);
                        nextNodeNumberVector2(1, State.un(ind)) = nodeNumberVector(1, ind);
                    end
                elseif motion(targetNumber) == -1
                    nextNodeVector2(1, State.up(ind)) = nodeVector(1, ind);
                    nextNodeNumberVector2(1, State.up(ind)) = nodeNumberVector(1, ind);
                else
                    nextNodeVector2(1, ind) = nodeVector(1, ind);
                    nextNodeNumberVector2(1, ind) = nodeNumberVector(1, ind);
                end
            end
        end


    if ~isequal(nextNodeVector,nextNodeVector2)
        nextNodeVector
        nextNodeVector2
    end
    if ~isequal(nextNodeNumberVector,nextNodeNumberVector2)
        nextNodeNumberVector
        nextNodeNumberVector2
    end

    tmpCol2 = cell2mat(State.baseNode(:,2));
    col_min_val = min(tmpCol2);
    col_max = 1 - min(tmpCol2) + 1;
    tmp_str_base = '';
     for i = 1:col_max
        tmp_str_base = [tmp_str_base '.'];
     end
        
    tmpCol3 = cell2mat(State.baseNode(:,3));
    row_max = max(tmpCol3) - min(tmpCol3) + 1;
   
    for i = row_max:-1:1
        tmp_str = tmp_str_base;
        for j = 1:col_max
            for k = 1:size(State.baseNode,1)
                if State.baseNode{k,3} == i && State.baseNode{k,4} ~= 0 && State.baseNode{k,2} == j + col_min_val - 1
                    tmp_str(j) = num2str(Node(1,State.baseNode{k,4}));
                end
            end
        end
        if isequal(Node(1, State.vssInpUpInd), 0) && i == row_max
            tmp_str(State.pre_MAX+1) = 'I';
        end
        if isequal(Node(1, State.vssInpUpInd), 0) && i == 1
            tmp_str(State.pre_MAX+2) = 'E';
        end
        if isequal(Node(1, State.vssInpUpInd), 1) && i == row_max
            tmp_str(State.pre_MAX+2) = 'E';
        end
        if isequal(Node(1, State.vssInpUpInd), 1) && i == 1
            tmp_str(State.pre_MAX+1) = 'I';
        end
        fprintf('%s\n', tmp_str);
        
        tmp_str3 = [];
        for m = 1:length(tmp_str)
            tmp_str3 = [tmp_str3 tmp_str(m) ','];
        end
        tmp_str3(end) = [];
       
    end    
